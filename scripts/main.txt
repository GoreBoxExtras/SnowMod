print("MainLoaded")
wait(2)
//////////// listeners //

ListenForInput
ListenForPlayer
ListenForSceneChange

//////////// variables //

var = {}

var._DEBUG = true
var._STOP = false

var.KEYBIND = "P"

var.debounce = 0

var.SnowModel = "snowball.fbx"
var.SnowCache = []

var.Balls = []

var.PosY = RandomFloat({"min": 35, "max": 55})
var.XPosMax = 15        
var.ZPosMax = 15
var.PlayerPosX = @posX
var.PlayerPosZ = @posZ
var.PlayerPosY = @posY

var.MaxLife = RandomFloat({"min": 1, "max": 6})

var.itercount = 0

//////////// functions //

func = {}

func.SpawnBall = function(script, name)
    SendChatMessageLocal({"sender": "GBE/SnowMod", "message": var.SnowCache.len})
    if var.SnowCache.len > 0 then
        // Reuse a particle from the cache
        name = var.SnowCache.pop()["name"]
    else
        // Create a new particle
        RandomXPos = var.PlayerPosX + RandomInt({"min": -(var.XPosMax / 2), "max": (var.XPosMax / 2)})
        RandomZPos = var.PlayerPosZ + RandomInt({"min": -(var.ZPosMax / 2), "max": (var.ZPosMax / 2)})

        InstantiateModel({
            "model": var.SnowModel,
            "name": name,
            "x": RandomXPos,
            "y": (var.PosY + var.PlayerPosY),
            "z": RandomZPos,
            "rotX": 0,
            "rotY": 0,
            "rotZ": 0,
            "rotW": 0,
            "scale": RandomFloat({"min": 0.3, "max": 0.7}),
            "collisions": false,
            "convex": false
        })
    end if

    ExecuteScript({"target": name, "script": script})
    var.Balls = func.ListAdd(var.Balls, name)
end function


func.CheckTable = function(table, min)
    result = table[0:]
    for index in indexes(result)
        for kv in result[index]
            if time() - kv.value >= min then
                // Add the particle back to the cache for reuse
                var.SnowCache.push({name: kv.key})
                result.remove(index)
            end if
        end for
    end for
    return result
end function

func.ListAdd = function(list, value)

    result = list[0:]
    result.insert(result.len, {value:time()})

    return result

end function

///////////////////////

func.Main = function(list)

    while true    
        // event and listeners loop
        loop._events()       

        // snow handling loop
        loop.SnowHandling()
        

        // fallback forceful stop
        if var._STOP == true then
            break
        end if

        yield
    end while

end function

//////////// loops //

loop = {}

loop._events = function()

    while _events.len > 0
        _nextEvent = _events.pull
        _nextEvent.invoke(_nextEvent.args)
    end while

end function

loop.SnowHandling = function()

    if (var.Balls.len < var.SnowDensity) then
        rndVar = RandomFloat({"min": 0, "max": 50})
        name = ("SnowParticle" + (rndVar))

        func.SpawnBall("snowball", name)
        //SendChatMessage({"sender": "DEBUG", "message": "man how we got bal at " + var.Balls.len})
    end if
     
 
    var.Balls = func.CheckTable(var.Balls, RandomFloat({"min": 1, "max": 8})) // referencing randomness from a variable isnt working?!
    var.itercount = 0

    var.itercount = var.itercount + 1

end function

//////////// SCRIPT //

OnKeyPress = function(args)
    key = args.key

    if key == var.KEYBIND then
        //print("detected")
        var._STOP = true
    end if


    // if key == "P" then
    //     if var.PAUSE == 1 then
    //         var.PAUSE = 0
    //     else
    //         var.PAUSE = 1
    //     end if
    // end if

end function

OnLocalDied = function(args)
    var._STOP = true
end function 


func.Main()
